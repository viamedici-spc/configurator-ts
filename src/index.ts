import {
    RequestTimeout,
    RequestFailure,
    SerializationError,
    MissingTenantIdClaim,
    MissingSessionIdClaim,
    TenantAccessForbidden,
    SessionIdInvalid,
    AuthenticationFailure,
    SideLoadingForbidden,
    UsageRuleRestriction,
    ConfigurationModelInvalid,
    SolutionNotFeasible,
    ConfigurationModelNotFound,
    SolverInitializationFailure,
    ConfigurationModelLoadFailure,
    ConfigurationInitializationFailure,
    SolverPoolInitializationFailure,
    SetDecisionConflict,
    SolveOperationTimeout,
    ExplainConflict,
    ExplainFailure,
    SnapshotInvalid,
    SnapshotNotFound,
    ConfigurationModelNotFeasible,
    SetManyDecisionsConflict,
    SpecifiedDeploymentForbidden,
    AttributeNotFound,
    ChoiceAttributeNotFound,
    ComponentAttributeNotFound,
    NumericAttributeNotFound,
    BooleanAttributeNotFound,
    ChoiceValueNotFound,
    NumericDecisionOutOfRange,
    ConflictWithConsequence,
    DecisionsToRespectInvalid,
    SessionNotFound,
    ServerError,
    ConnectionError,
    TaskCancelled,
    SessionClosed,
    StoredConfigurationInvalid,
    ConfiguratorError,
    ConfiguratorErrorType
} from "./contract/ConfiguratorError";
import {
    LocalAttributeId,
    LocalRuleId,
    ChoiceValueId,
    ConfigurationModelId,
    ChannelId,
    SourceAttributeId,
    GlobalAttributeIdKey,
    GlobalAttributeId,
    GlobalConstraintId,
    ExplicitDecision,
    ExplicitNumericDecision,
    ExplicitBooleanDecision,
    ExplicitChoiceDecision,
    ExplicitComponentDecision,
    CausedByDecision,
    CausedByNumericDecision,
    CausedByBooleanDecision,
    CausedByChoiceValueDecision,
    CausedByComponentDecision,
    ExplainQuestion,
    ExplainQuestionType,
    ExplainQuestionSubject,
    WhyIsNotSatisfied,
    WhyIsConfigurationNotSatisfied,
    WhyIsAttributeNotSatisfied,
    WhyIsStateNotPossible,
    WhyIsChoiceValueStateNotPossible,
    WhyIsNumericStateNotPossible,
    WhyIsBooleanStateNotPossible,
    WhyIsComponentStateNotPossible,
    ExplainAnswer,
    DecisionsExplainAnswer,
    ConstraintsExplainAnswer,
    FullExplainAnswer,
    DecisionExplanation,
    ConstraintExplanation,
    ExplainSolution,
    Configuration,
    DecisionsToRespect,
    AttributeRelations,
    ClientSideSessionInitialisationOptions,
    ServerSideSessionInitialisationOptions,
    SessionContext,
    OptimisticDecisionOptions,
    AllowedInExplain,
    AllowedRulesInExplainType,
    AllowedRulesInExplain,
    AllowedRulesInExplainNone,
    AllowedRulesInExplainAll,
    AllowedRulesInExplainSpecific,
    ConfigurationModelSourceType,
    ConfigurationModelSource,
    ConfigurationModelFromChannel,
    ConfigurationModelFromPackage,
    Attribute,
    AttributeType,
    BaseAttribute,
    Decision,
    BooleanAttribute,
    NumericAttribute,
    ComponentAttribute,
    ChoiceAttribute,
    ChoiceValue,
    ChoiceValueDecisionState,
    ComponentDecisionState,
    DecisionKind,
    Selection,
    Inclusion,
    Cardinality,
    Range,
    BaseCollectedDecision,
    CollectedBooleanDecision,
    CollectedNumericDecision,
    CollectedComponentDecision,
    CollectedChoiceDecision,
    CollectedDecision,
    CollectedImplicitDecision,
    CollectedExplicitDecision,
    SetManyMode,
    SetManyDropExistingDecisionsMode,
    SetManyKeepExistingDecisionsMode,
    ConflictResolution,
    ManualConflictResolution,
    AutomaticConflictResolution,
    ConfigurationChanges,
    OnConfigurationChangedHandler,
    ExplainQuestionParam,
    SetManyResult,
    Subscription,
    OnCanResetConfigurationChangedHandler
} from "./contract/Types";
import {StoredConfiguration} from "./contract/storedConfiguration/StoredConfiguration";
import * as StoredConfigurationV1 from "./contract/storedConfiguration/StoredConfigurationV1";
import * as ConfigurationInterpreter from "./contract/interpreter/ConfigurationInterpreter";
import * as AttributeInterpreter from "./contract/interpreter/AttributeInterpreter";
import * as ChoiceValueInterpreter from "./contract/interpreter/ChoiceValueInterpreter";
import * as ExplainQuestionBuilderModule from "./contract/ExplainQuestionBuilder";
import * as AttributeRefinements from "./contract/refinements/AttributeRefinements";
import * as CollectedDecisionRefinements from "./contract/refinements/CollectedDecisionRefinements";
import {explainQuestionBuilder, ExplainQuestionBuilder} from "./contract/ExplainQuestionBuilder";
import SessionFactory from "./SessionFactory";
import IConfigurationSession from "./IConfigurationSession";
import ISessionFactory from "./ISessionFactory";
import GlobalAttributeIdKeyBuilder from "./crossCutting/GlobalAttributeIdKeyBuilder";
import {globalAttributeIdEq, globalAttributeIdKeyEq, globalConstraintIdEq, sessionContextEq} from "./contract/Eqs";
import Logger from "./contract/Logger";

export {
    Logger,

    type IConfigurationSession,
    type ISessionFactory,
    SessionFactory,

    GlobalAttributeIdKeyBuilder,

    AttributeRefinements,
    CollectedDecisionRefinements,

    type StoredConfiguration,
    StoredConfigurationV1,

    // Eqs
    globalAttributeIdKeyEq,
    globalAttributeIdEq,
    globalConstraintIdEq,
    sessionContextEq,

    // ConfigurationErrors
    type RequestTimeout,
    type RequestFailure,
    type SerializationError,
    type MissingTenantIdClaim,
    type MissingSessionIdClaim,
    type TenantAccessForbidden,
    type SessionIdInvalid,
    type AuthenticationFailure,
    type SideLoadingForbidden,
    type UsageRuleRestriction,
    type ConfigurationModelInvalid,
    type SolutionNotFeasible,
    type ConfigurationModelNotFound,
    type SolverInitializationFailure,
    type ConfigurationModelLoadFailure,
    type ConfigurationInitializationFailure,
    type SolverPoolInitializationFailure,
    type SetDecisionConflict,
    type SolveOperationTimeout,
    type ExplainConflict,
    type ExplainFailure,
    type SnapshotInvalid,
    type SnapshotNotFound,
    type ConfigurationModelNotFeasible,
    type SetManyDecisionsConflict,
    type SpecifiedDeploymentForbidden,
    type AttributeNotFound,
    type ChoiceAttributeNotFound,
    type ComponentAttributeNotFound,
    type NumericAttributeNotFound,
    type BooleanAttributeNotFound,
    type ChoiceValueNotFound,
    type NumericDecisionOutOfRange,
    type ConflictWithConsequence,
    type DecisionsToRespectInvalid,
    type SessionNotFound,
    type ServerError,
    type ConnectionError,
    type TaskCancelled,
    type SessionClosed,
    type StoredConfigurationInvalid,
    type ConfiguratorError,
    ConfiguratorErrorType,

    // Contract Definitions
    type LocalAttributeId,
    type LocalRuleId,
    type ChoiceValueId,
    type ConfigurationModelId,
    type ChannelId,
    type SourceAttributeId,
    type GlobalAttributeIdKey,
    type GlobalAttributeId,
    type GlobalConstraintId,
    // Contract Types
    type ExplicitDecision,
    type ExplicitNumericDecision,
    type ExplicitBooleanDecision,
    type ExplicitChoiceDecision,
    type ExplicitComponentDecision,
    type CausedByDecision,
    type CausedByNumericDecision,
    type CausedByBooleanDecision,
    type CausedByChoiceValueDecision,
    type CausedByComponentDecision,
    type ExplainQuestion,
    ExplainQuestionType,
    ExplainQuestionSubject,
    type WhyIsNotSatisfied,
    type WhyIsConfigurationNotSatisfied,
    type WhyIsAttributeNotSatisfied,
    type WhyIsStateNotPossible,
    type WhyIsChoiceValueStateNotPossible,
    type WhyIsNumericStateNotPossible,
    type WhyIsBooleanStateNotPossible,
    type WhyIsComponentStateNotPossible,
    type ExplainAnswer,
    type DecisionsExplainAnswer,
    type ConstraintsExplainAnswer,
    type FullExplainAnswer,
    type DecisionExplanation,
    type ConstraintExplanation,
    type ExplainSolution,
    type Configuration,
    type DecisionsToRespect,
    type AttributeRelations,
    type ClientSideSessionInitialisationOptions,
    type ServerSideSessionInitialisationOptions,
    type SessionContext,
    type OptimisticDecisionOptions,
    type AllowedInExplain,
    AllowedRulesInExplainType,
    type AllowedRulesInExplain,
    type AllowedRulesInExplainNone,
    type AllowedRulesInExplainAll,
    type AllowedRulesInExplainSpecific,
    ConfigurationModelSourceType,
    type ConfigurationModelSource,
    type ConfigurationModelFromChannel,
    type ConfigurationModelFromPackage,
    type Attribute,
    AttributeType,
    type BaseAttribute,
    type Decision,
    type BooleanAttribute,
    type NumericAttribute,
    type ComponentAttribute,
    type ChoiceAttribute,
    type ChoiceValue,
    ChoiceValueDecisionState,
    ComponentDecisionState,
    DecisionKind,
    Selection,
    Inclusion,
    type Cardinality,
    type Range,
    type BaseCollectedDecision,
    type CollectedBooleanDecision,
    type CollectedNumericDecision,
    type CollectedComponentDecision,
    type CollectedChoiceDecision,
    type CollectedDecision,
    type CollectedImplicitDecision,
    type CollectedExplicitDecision,
    type SetManyMode,
    type SetManyDropExistingDecisionsMode,
    type SetManyKeepExistingDecisionsMode,
    type ConflictResolution,
    type ManualConflictResolution,
    type AutomaticConflictResolution,
    type ConfigurationChanges,
    type OnConfigurationChangedHandler,
    type OnCanResetConfigurationChangedHandler,
    type ExplainQuestionParam,
    type SetManyResult,
    type Subscription,

    // Interpreter
    ConfigurationInterpreter,
    AttributeInterpreter,
    ChoiceValueInterpreter,

    // ExplainQuestionBuilder
    ExplainQuestionBuilderModule,
    type ExplainQuestionBuilder,
    explainQuestionBuilder,
};