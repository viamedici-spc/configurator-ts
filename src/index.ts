import * as Types from "./contract/Types";
import {
    AllowedInExplain,
    AllowedRulesInExplain,
    AllowedRulesInExplainAll,
    AllowedRulesInExplainNone,
    AllowedRulesInExplainSpecific,
    AllowedRulesInExplainType,
    Attribute,
    AttributeRelations,
    AttributeType,
    AutomaticConflictResolution,
    BaseAttribute,
    BooleanAttribute,
    Cardinality,
    CausedByBooleanDecision,
    CausedByChoiceValueDecision,
    CausedByComponentDecision,
    CausedByDecision,
    CausedByNumericDecision,
    ChangeSet,
    ChannelId,
    ChoiceAttribute,
    ChoiceValue,
    ChoiceValueDecisionState,
    ChoiceValueId,
    ComponentAttribute,
    ComponentDecisionState,
    Configuration,
    ConfigurationModelFromChannel,
    ConfigurationModelFromPackage,
    ConfigurationModelId,
    ConfigurationModelSource,
    ConfigurationModelSourceType,
    ConflictResolution,
    ConflictResolutionBase,
    ConstraintExplanation,
    ConstraintsExplainAnswer,
    ConstraintType,
    Decision,
    DecisionExplanation,
    DecisionKind,
    DecisionsExplainAnswer,
    DecisionsToRespect,
    eqCausedByDecision,
    eqGlobalAttributeId,
    eqGlobalConstraintId,
    ExplainAnswer,
    ExplainQuestion,
    ExplainQuestionSubject,
    ExplainQuestionType,
    ExplainSolution,
    ExplicitBooleanDecision,
    ExplicitChoiceDecision,
    ExplicitComponentDecision,
    ExplicitDecision,
    ExplicitNumericDecision,
    FullExplainAnswer,
    GlobalAttributeId,
    GlobalConstraintId,
    Inclusion,
    LocalAttributeId,
    LocalRuleId,
    ManualConflictResolution,
    NumericAttribute,
    Range,
    Selection,
    SessionContext,
    SessionCreated,
    SessionId,
    SessionTimeout,
    SetManyDefaultMode,
    SetManyDropExistingDecisionsMode,
    SetManyKeepExistingDecisionsMode,
    SetManyMode,
    WhyIsAttributeNotSatisfied,
    WhyIsBooleanStateNotPossible,
    WhyIsChoiceValueStateNotPossible,
    WhyIsComponentStateNotPossible,
    WhyIsConfigurationNotSatisfied,
    WhyIsNotSatisfied,
    WhyIsNumericStateNotPossible,
    WhyIsStateNotPossible
} from "./contract/Types";
import * as Results from "./contract/Results";
import {
    BaseFailure,
    CommunicationError,
    ConfigurationApplicationError,
    ConfigurationAttributeNotFound,
    ConfigurationChoiceValueNotFound,
    ConfigurationConflict,
    ConfigurationConflictReason,
    ConfigurationInitializationFailure,
    ConfigurationModelInvalid,
    ConfigurationModelNotFeasible,
    ConfigurationModelNotFound,
    ConfigurationRejectedDecisionsConflict,
    ConfigurationSetManyConflict,
    ConfigurationSolutionNotAvailable,
    ConfigurationTimeout,
    ConfigurationUnauthenticated,
    ConfigurationUnauthorized,
    DecisionsToRespectInvalid,
    ExplainFailure,
    ExplainConflict,
    FailureResult,
    FailureType,
    ServiceError,
    Unknown
} from "./contract/Results";
import ContractToRestMapper from "./mappers/ContractToRestMapper";
import ClientSideSessionLifetimeHandler from "./sessionCreator/ClientSideSessionLifetimeHandler";
import ServerSideSessionLifetimeHandler from "./sessionCreator/ServerSideSessionLifetimeHandler";
import ConfiguratorClient from "./ConfiguratorClient";
import IConfigurationSession, {ExplainQuestionParam, OnConfigurationChangedHandler} from "./IConfigurationSession";
import IConfiguratorClient from "./IConfiguratorClient";
import * as ConfigurationInterpreter from "./contract/interpreter/ConfigurationInterpreter";
import * as AttributeInterpreter from "./contract/interpreter/AttributeInterpreter";
import * as ChoiceValueInterpreter from "./contract/interpreter/ChoiceValueInterpreter";
import * as ExplainQuestionBuilderModule from "./contract/ExplainQuestionBuilder";
import {explainQuestionBuilder, ExplainQuestionBuilder} from "./contract/ExplainQuestionBuilder";

import {createClient} from "./ConfiguratorClientFactory";
import {ClientOptions, ClientSideLifeTimeHandlerOptions, ServerSideLifeTimeHandlerOptions} from "./Options";

const globalAttributeIdEquals = eqGlobalAttributeId.equals;
const globalConstraintIdEquals = eqGlobalConstraintId.equals;
const causedByDecisionEquals = eqCausedByDecision.equals;

export {
    createClient,
    type ClientSideLifeTimeHandlerOptions,
    type ServerSideLifeTimeHandlerOptions,
    type ClientOptions,

    globalAttributeIdEquals,
    globalConstraintIdEquals,
    causedByDecisionEquals,

    Types,
    Results,
    ServerSideSessionLifetimeHandler,
    ClientSideSessionLifetimeHandler,
    ContractToRestMapper,
    type ExplainQuestionParam,
    type IConfigurationSession,
    type OnConfigurationChangedHandler,
    type IConfiguratorClient,
    ConfiguratorClient,

    // Contract Types
    type GlobalAttributeId,
    type GlobalConstraintId,
    type Decision,
    type ExplainQuestion,
    ExplainQuestionType,
    ExplainQuestionSubject,
    type WhyIsNotSatisfied,
    type WhyIsConfigurationNotSatisfied,
    type WhyIsAttributeNotSatisfied,
    type WhyIsStateNotPossible,
    type DecisionExplanation,
    Inclusion,
    type CausedByBooleanDecision,
    type CausedByNumericDecision,
    type ChangeSet,
    ConstraintType,
    type CausedByComponentDecision,
    type ConflictResolutionBase,
    type CausedByChoiceValueDecision,
    type WhyIsChoiceValueStateNotPossible,
    type WhyIsNumericStateNotPossible,
    type WhyIsBooleanStateNotPossible,
    type WhyIsComponentStateNotPossible,
    type ExplainAnswer,
    type DecisionsExplainAnswer,
    type ConstraintsExplainAnswer,
    type FullExplainAnswer,
    type ConstraintExplanation,
    type ExplainSolution,
    type CausedByDecision,

    type AllowedInExplain,
    AllowedRulesInExplainType,
    type AllowedRulesInExplain,
    type AllowedRulesInExplainNone,
    type AllowedRulesInExplainAll,
    type AllowedRulesInExplainSpecific,
    type ExplicitDecision,
    type ExplicitChoiceDecision,
    type ExplicitComponentDecision,
    type ExplicitNumericDecision,
    type ExplicitBooleanDecision,
    type Configuration,
    type SessionContext,
    ConfigurationModelSourceType,
    type ConfigurationModelSource,
    type ConfigurationModelFromChannel,
    type ConfigurationModelFromPackage,
    type SessionCreated,
    type SessionTimeout,
    type Attribute,
    AttributeType,
    type BaseAttribute,
    type BooleanAttribute,
    type NumericAttribute,
    type ComponentAttribute,
    type ChoiceAttribute,
    type ChoiceValue,
    ChoiceValueDecisionState,
    ComponentDecisionState,
    DecisionKind,
    type Cardinality,
    type Range,
    type SetManyMode,
    type SetManyDefaultMode,
    type SetManyDropExistingDecisionsMode,
    type SetManyKeepExistingDecisionsMode,
    type ConflictResolution,
    type ManualConflictResolution,
    type AutomaticConflictResolution,
    type DecisionsToRespect,
    type AttributeRelations,
    Selection,

    // Contract Results
    type FailureResult,
    type BaseFailure,
    FailureType,
    type ConfigurationModelNotFound,
    type Unknown,
    type CommunicationError,
    type ConfigurationModelInvalid,
    type ServiceError,
    type ConfigurationConflict,
    type DecisionsToRespectInvalid,
    type ConfigurationModelNotFeasible,
    type ConfigurationRejectedDecisionsConflict,
    type ConfigurationAttributeNotFound,
    type ConfigurationChoiceValueNotFound,
    type ConfigurationUnauthorized,
    type ConfigurationUnauthenticated,
    type ConfigurationApplicationError,
    type ConfigurationTimeout,
    type ConfigurationSolutionNotAvailable,
    type ConfigurationInitializationFailure,
    type ConfigurationSetManyConflict,
    type ExplainConflict,
    type ExplainFailure,
    ConfigurationConflictReason,

    // Contract Definitions
    type SessionId,
    type LocalAttributeId,
    type ChoiceValueId,
    type ConfigurationModelId,
    type ChannelId,
    type LocalRuleId,

    // Interpreter
    ConfigurationInterpreter,
    AttributeInterpreter,
    ChoiceValueInterpreter,

    // ExplainQuestionBuilder
    ExplainQuestionBuilderModule,
    type ExplainQuestionBuilder,
    explainQuestionBuilder
};